#!/bin/bash
# vim:set ft=bash
set -eu -o pipefail

SCRIPT_DIR="$(cd "${BASH_SOURCE%/*}" && pwd -P)"
VENV_PYTHON="${1:-python3}"
PROJECT_DIR="$SCRIPT_DIR/.."
LIB_DIR="$PROJECT_DIR/lib"

# shellcheck source=virtualenv
[ -f "$PROJECT_DIR/.build/bin/activate" ] || "$SCRIPT_DIR/virtualenv" "$VENV_PYTHON"

# We do not control the quality of 3rd party code ...
set +u
# shellcheck disable=SC1090
# Rationale: most of the time when shellcheck is ran there will be no "activate"
. "$PROJECT_DIR/.build/bin/activate"
# .. but we keep ours up to the standard :)
set -u

echo Copying over the necessary bits ...
test -d "$LIB_DIR" || mkdir -m711 "$LIB_DIR"
DEPS_COPIED=
for package in $(pip list -l --isolated --format=columns \
	| sed 1,2d | cut -f1 -d' ' \
	| grep -vE '^(boto|boto3|botocore|docutils|jmespath|pip|python-dateutil|s3transfer|setuptools|six|wheel)$')
do
	printf '+ %s ... ' "$package"
	# The following sed script is a bit hard to comprehend to people who are
	# not familiar with sed.  Basically the script logic is as follows:
	#   1. Find the line that starts with "Location:"
	#   2. Save the value of the "Location:" line and copy the first char to
	#      the end of the line (assumption: we only expect absolute paths
	#      here, so the first character should always be '/'
	#   3. Save the result, which is the location path with a trailing slash
	#      to the "hold" buffer
	#   4. Find the line that starts with "Files:"
	#   5. Once the line was found read each line and try to locate either
	#      a Python script with no directory separators in the path name or
	#      the __init__.py directory in a subdirectory
	#   6. If any of the above is found, strip the rightmost /__init__.py
	#      from the found line: this will leave either the script file or
	#      the directory where __init__.py was found under
	#   7. Append the found piece to the "hold" buffer.  This will form the
	#      complete path name to the module in the "hold" buffer
	#   8. Finally, exchange the "hold" buffer with the "pattern" buffer
	#      (since we can only print the latter), and print the "pattern"
	#      buffer to the standard output
	#
	# There are edge cases with the malformed manifests, e.g. "Location:" is
	# specified after "Files:" or multiple tags in the manifest, but in the
	# current form it does the job and there is no need to come up with
	# something more complex.
	cp -pr "$(pip show --isolated -f "$package" \
		| sed -nE '/^\s*Location:/{s,^\s*Location:\s*((/).+$),\1\2,;T;h};/^\s*Files:/{:a;n;s,^\s+([^/]+(/__init__)?\.py)\s*$,\1,;T a;s,/__init__\.py$,,;H;x;s,\n,,;p;b}')" \
		"$LIB_DIR/"
	# The logic is exactly the same as above except we are searching for the
	# .so files (and there may be none, hence additional condition for copy)
	WHEELS="$(pip show --isolated -f "$package" | sed -nE '/^\s*Location:/{s,^\s*Location:\s*((/).+$),\1\2,;T;h};/^\s*Files:/{:a;n;s,^\s+([^/]+\.so)\s*$,\1,;T a;H;x;s,\n,,;p;b}')"
	if [ -n "$WHEELS" ]; then
		cp -pr "$WHEELS" "$LIB_DIR/"
	fi
	printf 'copied\n'
	DEPS_COPIED=1
done

if [ -z "$DEPS_COPIED" ]; then
	printf '%s' '\n\nERROR: Something went wrong and no dependencies were copied into the final\n       tree, cannot continue!\n\n' >&2
	exit 1
fi
unset DEPS_COPIED

echo removing compiled bytecode
find "$LIB_DIR" -xdev \( -path '*/__pycache__/*' -o -name __pycache__ \) -delete
find "$LIB_DIR" -xdev -name '*.pyc' -delete

echo Fixing permissions ...
find "$LIB_DIR" -xdev -type d -execdir chmod 00755 '{}' \;
find "$LIB_DIR" -xdev -type f -execdir chmod 00644 '{}' \;

# The following is to make "make" happy :)
# shellcheck disable=SC2128
touch "${BASH_SOURCE}"
